install: ## Install the poetry environment and install the pre-commit hooks
	@echo "ðŸš€ set pyenv local python version..."
	@pyenv local 3.10
	@echo "ðŸš€ creating virtual environment using pyenv and poetry..."
	@poetry install
	@echo "ðŸš€ creating git repository..."
	@git init -b main
	@poetry run pre-commit install
	@echo "ðŸš€ setup direnv..."
	@./create_envrc.sh
	@direnv allow .envrc
	@echo "ðŸš€ do first commit..."
	@git add .
	@poetry run pre-commit run -a
	@git commit -m "first-commit"

.PHONY: first-commit
first-commit:
	@echo "ðŸš€ Do first commit"
	@git add .
	@poetry run pre-commit run -a
	@git commit -m "first-commit"

.PHONY: check
check: ## Run code quality tools.
	@echo "ðŸš€ Checking Poetry lock file consistency with 'pyproject.toml': Running poetry lock --check"
	@poetry lock --check
	@echo "ðŸš€ Linting code: Running pre-commit"
	@poetry run pre-commit run -a
	@echo "ðŸš€ Static type checking: Running mypy"
	@poetry run mypy src/
{%- if cookiecutter.deptry == 'y' %}
	@echo "ðŸš€ Checking for obsolete dependencies: Running deptry"
	@poetry run deptry .
{%- endif %}

.PHONY: test
test: ## Test the code with pytest
	@echo "ðŸš€ Testing code: Running pytest"
	@poetry run pytest --cov --cov-config=pyproject.toml --cov-report=xml

.PHONY: build
build: clean-build ## Build wheel file using poetry
	@echo "ðŸš€ Creating wheel file"
	@poetry build

.PHONY: clean-build
clean-build: ## clean build artifacts
	@rm -rf dist

.PHONY: help
help:
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

.DEFAULT_GOAL := help
